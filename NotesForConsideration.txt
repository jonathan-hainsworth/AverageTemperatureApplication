General Design Considerations.

1. Queue requests: Resilience
Planning to implement a queue as users are required to be anonymous 
	A queue that executes requests on a timer, acceptable limits on workload agreed (Throttling \ The backpressure pattern)
		CON - Slow requests, would throttle requests for all users not just individuals (if User Key is not implemented)
	State of API shuts off if queue reaches predetermined limit (circuit breaker pattern)
		CON - Downtime for other users (user API key could mitigate this so separate users have their own queues)

2. Asynchronous Method 
PRO - High Availability: Asynchronous Methods, runs in a thread separate from threads that call it.

3. Scope of Injected Dependencies
PRO - High Availability: Declaring the scope of the injected dependencies so that they are created as they are required and used where appropriate.

4. Caching to database 
CON - data could be cached to memory, so that there is no dependency on database being avalible.
PRO - if application is restarted cached data is not lost.

For discussion: 
User API Key - Out of scope
User API key to distinguish users however throttling is an option where a queue based pattern where requests are stored and processed at a given rate.
CON - Replied on an API key to identify user, extra overhead of writing and maintaining key issuing/ invalidating
PRO - This could be used with a queue to throttle requests for individual user

Graceful degradation, a secondary way for the service to be called if the first service fails, eg UI might use secondary endpoint

To include in implementation: 
* Function that clears the cache, only 5 days of data is required we should not be keeping data that is not required
* Mapping between Objects, to exclude include certain data between layers (day, isSuccessfulStatus)
* Exceptions could be thrown as they occur, e.g. when results are unavailable, and handled on the pipeline allowing true thin controller(s)
* Validation when requests are out of 5 day period
* Cancelation Token as part of asynchronous requests - reduce workload for cancelled requests

--Issues when developing
Getting historical data back from OpenWeatherAPI for historical data, I am able to get other types of weather back using Postman but receive 401 for this the end point in the form:
https://api.openweathermap.org/data/2.5/onecall?lat={lat}&lon={lon}&exclude={part}&appid={API key}
Example:
https://history.openweathermap.org/data/2.5/history/city?lat=41.85&lon=-87.65&appid=<API_Key>
Note: I can get data back from other end points
