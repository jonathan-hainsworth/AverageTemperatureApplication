For consideration.

1. Throttling
Application to use API key to distinguish users however throttling is an option where a queue based pattern where requests are stored and processed at a given rate.
PRO - This approach does not reply on an API key to identify user (that the governance of has not been implemented).
CON - This would throttle requests for all users not just individuals
Update: Now planning to implement a queue as users are required to be anonymous

2. Asynchronous Method 
PRO - High Availability: Asynchronous Method, runs in a thread separate from the main application thread freeing up the main thread.

3. Scope of Injected Dependencies
PRO - High Availability: Declaring the scope of the injected dependencies so that they are created as they are required.

4. Caching to database 
CON - data could be cached to memory, so that there is no dependency on database being avalible.
PRO - if application is restarted cached data is not lost.

-- To include
* Function that clears the cache, only 5 days of data is required
* Mapping between Objects
* Exceptions could be thrown as they occur, e.g. when results are unavalible, and handled on the pipeline creating proper thin controller
* Validation when requests are out of 5 day period
* Cancelation Token as part of asyncronous requests

--Issues
Getting data back from OpenWeatherAPI for historical data, I am able to get other types of weather back using Postman but recieve 401 for this the end point in the form:
https://api.openweathermap.org/data/2.5/onecall?lat={lat}&lon={lon}&exclude={part}&appid={API key}
Example:
https://history.openweathermap.org/data/2.5/history/city?lat=41.85&lon=-87.65&appid=<API_Key>